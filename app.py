import streamlit as st
import cv2
import tempfile
import pandas as pd

# Mevcut modÃ¼llerimizi import ediyoruz
from video_stream_manager import VideoStreamManager
from person_detect_and_tracking_engine import PersonTrackingEngine
from density_map_generator import DensityMapGenerator
from entry_exit_counter import EntryExitCounter

st.set_page_config(layout="wide", page_title="GerÃ§ek ZamanlÄ± Alan Analizi")

st.title("GerÃ§ek ZamanlÄ± Alan KullanÄ±m ve YoÄŸunluk Takibi")
st.write("Analiz etmek istediÄŸiniz videoyu yÃ¼kleyin ve 'Analizi BaÅŸlat' butonuna tÄ±klayÄ±n.")

# --- SIDEBAR: KONTROL PANELÄ° ---
with st.sidebar:
    st.header("Kontroller")
    uploaded_file = st.file_uploader("Video DosyasÄ± SeÃ§in", type=["mp4", "avi", "mov"])

    # GiriÅŸ/Ã‡Ä±kÄ±ÅŸ Ã§izgisi ve harita ayarlarÄ± iÃ§in sliderlar
    line_y_position = st.slider("GiriÅŸ/Ã‡Ä±kÄ±ÅŸ Ã‡izgisi Konumu (Y-Ekseni)", 0, 1080, 350)
    heatmap_blur = st.slider("IsÄ± HaritasÄ± BulanÄ±klÄ±k DeÄŸeri", 1, 101, 61, step=2)
    heatmap_percentile = st.slider("IsÄ± HaritasÄ± Kontrast YÃ¼zdesi (%)", 90, 100, 98)

    start_button = st.button("Analizi BaÅŸlat")

# --- ANA EKRAN ---
if uploaded_file is not None and start_button:
    # YÃ¼klenen videoyu geÃ§ici bir dosyaya kaydet
    tfile = tempfile.NamedTemporaryFile(delete=False)
    tfile.write(uploaded_file.read())
    video_source = tfile.name

    # Analiz motorlarÄ±nÄ± baÅŸlat
    stream_manager = VideoStreamManager(video_source)
    tracking_engine = PersonTrackingEngine()

    stream_manager.start_stream()
    ret, first_frame = stream_manager.get_frame()

    if not ret:
        st.error("Video okunamadÄ±. LÃ¼tfen farklÄ± bir dosya deneyin.")
    else:
        # SÄ±nÄ±flarÄ± sidebar'dan gelen deÄŸerlerle baÅŸlat
        density_generator = DensityMapGenerator(first_frame.shape, heatmap_blur, heatmap_percentile)
        counter = EntryExitCounter(line_y_position)
        stream_manager.stop_stream()  # BaÅŸa al
        stream_manager.start_stream()

        # Video akÄ±ÅŸÄ± iÃ§in bir yer tutucu oluÅŸtur
        stframe = st.empty()
        progress_bar = st.progress(0)

        # Toplam kare sayÄ±sÄ±nÄ± al (OpenCV 7+)
        total_frames = int(stream_manager.cap.get(cv2.CAP_PROP_FRAME_COUNT))
        frame_count = 0

        while True:
            ret, frame = stream_manager.get_frame()
            if not ret:
                break

            frame_count += 1
            annotated_frame, person_count, tracked_objects = tracking_engine.process_frame(frame)

            points = [obj['center'] for obj in tracked_objects if 'center' in obj]
            density_generator.add_points(points)
            counter.update(tracked_objects)

            # Ã‡izgi ve sayaÃ§larÄ± ekle
            cv2.line(annotated_frame, (0, line_y_position), (frame.shape[1], line_y_position), (0, 255, 255), 2)
            cv2.putText(annotated_frame, f"Giris: {counter.entries}", (50, 80), cv2.FONT_HERSHEY_SIMPLEX, 1.5,
                        (0, 255, 0), 3)
            cv2.putText(annotated_frame, f"Cikis: {counter.exits}", (50, 140), cv2.FONT_HERSHEY_SIMPLEX, 1.5,
                        (0, 0, 255), 3)

            # Streamlit iÃ§in kareyi BGR'dan RGB'ye Ã§evir
            frame_rgb = cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB)
            stframe.image(frame_rgb, channels="RGB")

            # Ä°lerleme Ã§ubuÄŸunu gÃ¼ncelle
            if total_frames > 0:
                progress_bar.progress(frame_count / total_frames)

        progress_bar.progress(1.0)
        st.success("Video analizi baÅŸarÄ±yla tamamlandÄ±!")
        stream_manager.stop_stream()

        # --- SONUÃ‡ SEKMELERÄ° ---
        st.header("Analiz SonuÃ§larÄ±")
        tab1, tab2, tab3 = st.tabs(["ğŸ“Š Rapor", "ğŸ“œ Loglar", "ğŸ”¥ IsÄ± HaritasÄ±"])

        with tab1:
            st.subheader("Genel Rapor")
            col1, col2 = st.columns(2)
            col1.metric("Toplam GiriÅŸ Yapan KiÅŸi SayÄ±sÄ±", counter.entries)
            col2.metric("Toplam Ã‡Ä±kÄ±ÅŸ Yapan KiÅŸi SayÄ±sÄ±", counter.exits)

        with tab2:
            st.subheader("GiriÅŸ ve Ã‡Ä±kÄ±ÅŸ KayÄ±tlarÄ±")
            col1, col2 = st.columns(2)
            with col1:
                st.write("GiriÅŸ LoglarÄ±")
                if counter.entry_logs:
                    df_entry = pd.DataFrame(counter.entry_logs)
                    st.dataframe(df_entry)
                else:
                    st.info("GiriÅŸ yapan kimse tespit edilmedi.")
            with col2:
                st.write("Ã‡Ä±kÄ±ÅŸ LoglarÄ±")
                if counter.exit_logs:
                    df_exit = pd.DataFrame(counter.exit_logs)
                    st.dataframe(df_exit)
                else:
                    st.info("Ã‡Ä±kÄ±ÅŸ yapan kimse tespit edilmedi.")

        with tab3:
            st.subheader("Genel YoÄŸunluk HaritasÄ±")
            with st.spinner('IsÄ± haritasÄ± oluÅŸturuluyor...'):
                final_heatmap = density_generator.generate_heatmap_image()
                final_result = cv2.addWeighted(first_frame, 0.2, final_heatmap, 0.8, 0)
                final_result_rgb = cv2.cvtColor(final_result, cv2.COLOR_BGR2RGB)
                st.image(final_result_rgb, caption="En yoÄŸun bÃ¶lgeler kÄ±rmÄ±zÄ± renkle gÃ¶sterilmiÅŸtir.")
